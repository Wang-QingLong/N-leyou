1---创建聚合过程: 版本号写1.0.0不要写1.0
2---为什么要使用Finchley.SR2版本，因为spring-cloud的1版本有很多的Bug


3--创建注册中心模块:
    引入依赖 :
             <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
             </dependency>

    开启server服务注解: @EnableEurekaServer

    写配置文件:   详情看配置文件

4--创建网关模块，这里使用zuul网关
    因为是客户端，网关，所以需要导入2个依赖

            <!--客户端-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client </artifactId>
            </dependency>
            <!--zuul网关-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
            </dependency>
    然后开始开启注解开关，设置配置


5---导入需要的后台前端页面

注意 vue组件项目也可以看成一个maven工程，拿过来的时候也需要导依赖

6--需要改变域名，我们可以借助一个工具  SwitchHosts  工具
7--需要改变端口，我们可以借助nginx(web服务器和反向代理)
   什么是正向代理？ 就是代理客户端
   什么是反向代理？ 就是代理服务端

   Web服务器分2类：web应用服务器 如：tomcat resin jetty  能解析jsp,但是并发能力弱
                 web服务器，如：Apache Nginx lls（window serve里面的服务器，默认80端口） 不能解析jsp,只能处理js,css,html等静态资源
                           但是服务器的并发能力远高于web应用服务器。
   Nginx具备网关的必备功能: 反向代理  负载均衡  动态路由  请求过滤

8--启动网关之后就会出现跨域问题，这个时候只需要在网关里面配置一下即可

9--细节，对前台传入的参数要进行健壮性判断

10--拿到一个请求，先判断是什么请求，查询要问自己是否需要分页处理，然后看下前端需要返回什么数据，对应数据库哪一张表，表里面有什么数据，如何获取这些数据，然后建立对应的实体类
和对应的DTO类，不需要的数据不需要返回，可以在配置里面设置
  jackson:
    default-property-inclusion: non_null   #返回值为null不返回


    接收请求，分页查询的时候
    如果某些参数不知道是否需要传，设置非必须
      @RequestParam(value = "key", required = false)
    详情更多，查看queryPage方法内部如何实现

新增品牌时，需要用到上传图片，其实就是将图片通过Io流写到某个位置(通常服务器)然后保存该图片地址。
11  新增品牌--图片上传 我们单独用一个模块

主要核心导入
 <!--aliyun的对象存储-->
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <version>3.4.2</version>
            <scope>compile</scope>
        </dependency>

直接拉取拷贝upload这个模块就可以使用了

分析请求，来源于Form Data 数据

12--- 修改品牌
      先根据品牌Id查询分类数据  品牌id和分类id是多对多的关系
      修改分2步，若存在中间表要先删除中间表数据再建立新的关系

13----删除品牌 先判断是否存在中间表，存在则不能删除，要删除也要先删除中间表

14----商品列表   理清商品之间的关系
               spu指的是通用属性，比如：商品最上边的标题，商品下面的详情介绍，包装清单
                                    售后，规则与包装
               sku指的是具体的属性，比如：商品的具体标题，商品具体图片，
                                      商品的价格，库存，


15--  前台优化

      SEO 搜索引擎优化

    后台的前台使用的是单页面，但是单页面对搜索引擎不怎么支持，所以不用单页面

16--分析前台页面需要什么

     首先分析商品: 商品有标题，有副标题卖点，有价格，有具体的图片，通过点击商品的标题可以进入商品
     详情页

     所以：  设计表:  先看商品:
                   表中必须要有SpuId字段，通过SpuId可以进入商品详情页
                   可以切换不同的图片选中不同的商品，所以要有List<sku> 数据
                   有商品促销卖点副标题：所以要有subTitle
                   --
                   然后看界面上面商品的分类:
                   所以要有cid1 cid2 cid3
                   --
                   左侧分类下面有品牌，网络制式，显示屏尺寸，摄像头像数，价格等
                   品牌：对应要有品牌Id
                   网络制式，显示屏尺寸，摄像头等和它对应的规格参数。
                   可以使用Map<name,value> 封装
                   价格，因为多个，用list<long> price封装
                   --
                   排序方面，有新品，价格等，如果使用新品排序，需要使用到 createTime
                   --
                   顶部搜索框，可以输入title标题，可以输入品牌名称 可以输入分类名称
                   所以这里我们统一用all字段
                   all(title brandName categoryName)

     上面我们分析了需要的信息

   Goods                          Spu
   搜索：                 all:(title brandName categoryName)
   进入商品详情页：                 SpuId
   商品信息                       List<sku>
   商品信息里面的商品卖点标题         subTitle
   商品分类                     cid1 cid2 cid3
   品牌                            brandId
   品牌下面的其他规格参数          Map<name,value>
       价格                     List<Long> price   sku里面包含了
   根据新品排序                     CreateTime      spu里面有

   我们需要从数据库拿数据然后转换到索引库，不可能说一次性将全部数据导入，千万条压力大
   所以也就是分批查询spu数据，将Spu数据转换成goods数据
             list<spu> => list<goods>
   其实本质就是分页查询，然后使用repository.saveAll(goodlist)插入

   分析我们需要哪些接口，来讲需要的spu数据转化成goods数据

     首先   SPU信息 在sController里面发现我们已经写过 querySpuByPage
           Sku信息  通过SpuId查询，已经写过  findSkusBySpuId
           SPu详情  我们需要根据规格参数聚合（generic_spec） 发现已经写了
           商品分类名称(拼接成all字段)   通过SpuIds查询里面的cids,再通过cids查询分类名称
                                      在categoryController里面发现没写，我们就需                                       要自己添加一个queryCategoriesByIds
           需要品牌名称          通过SpuId获取品牌Id，再通过品牌Id查询品牌信息
                               在brandController里面查看下有没有,发现没有，添加一个
                               queryBrandById
           品牌下面的其他规格参数  打开数据库表，发现只有searching为true才能进行规格参数
                               搜索，再去找有没有写接口，发现写了，findParams，但是不全
                               我们自己补全即可。

接口写好了我们就需要在search模块里面去调用接口，这个时候我们需要使用到feign

   1,引入启动器
   2，覆盖默认配置
   3，在引导类上添加注解@EnableFeignClients
   4, 在代码中使用feign
      1,定义ItemFeignClient接口 这里我将接口抽出去了单独放一个模块，以便其他模块使用
      2，在接口上添加注解@FeignClient("leyou-item-service")


 接口写好了，下一步就是开始批量讲数据库数据导入索引库，所以就需要创建GoodIndexService
 在里面写将list<SPU>转换成 list<goods> 过程

 然后编写接口 SearchController 根据前台传入的数据，编写接收的实体类SearchRequest
 然后写编写一个业务类GoodSearchService ,在里面编写我们需要的查询逻辑。

 接下来，使用静态化技术thymeleaf
 单独创建一个模块Page


 如何使用springamqp ,

---- 发送消息方

 在需要发送消息的地方加上注解
    @Autowired
   private AmqpTemplate amqpTemplate;

   然后在方法内部写上方法

    //商品服务负责消息的发出，routingkey不同，所以其实可以把消息发给不同队列
           this.amqpTemplate.convertAndSend(交换机名字, rouingKey, 需要发送的数据);

 导入依赖

    <!--Springamqp-->
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-amqp</artifactId>
         </dependency>

  配置:


  rabbitmq: #配置rabbitMq的消息
    host: 192.168.2.128   #虚拟机地址
    virtual-host: /leyou
    username: leyou      #登录账户
    password: leyou
    template: #关于生产者的配置
      retry:
        enabled: true   #允许重试
        initial-interval: 10000ms  #默认重试间隔
        max-interval:  80000ms #最大间隔
        multiplier: 2  #间隔倍数
    publisher-confirms: true  #发送确认

---接收消息方
1,需要写监听方法 比如这里的search

@Component
public class ItemListener {

    @Autowired
    private GoodsIndexService goodsIndexService;

    @RabbitListener(bindings = @QueueBinding(
            value = @Queue(name = SEARCH_ITEM_UP, durable = "true"),
            exchange = @Exchange(
                    name = ITEM_EXCHANGE_NAME, type = ExchangeTypes.TOPIC),
            key = ITEM_UP_KEY
    ))
    public void listenInsert(Long spuId){
        if(spuId != null){
            // 新增索引
            goodsIndexService.createIndex(spuId);
        }
    }

    @RabbitListener(bindings = @QueueBinding(
            value = @Queue(name = SEARCH_ITEM_DOWN, durable = "true"),
            exchange = @Exchange(
                    name = ITEM_EXCHANGE_NAME, type = ExchangeTypes.TOPIC),
            key = ITEM_DOWN_KEY
    ))
    public void listenDelete(Long spuId){
        if(spuId != null){
            // 删除
            goodsIndexService.deleteById(spuId);
        }
    }
}

2,需要导入依赖：

 <!--Springamqp-->
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-amqp</artifactId>
         </dependency>

3，需要书写配置：


  rabbitmq: #配置rabbitMq的消息
    host: 192.168.2.128   #虚拟机地址
    virtual-host: /leyou
    username: leyou      #登录账户
    password: leyou

消费者的确认机制在内部已经有了，所以不需要写



-------------------------------------
user登录模块

无状态登录的流程：

- 当客户端第一次请求服务时，服务端对用户进行信息认证（登录）
- 认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证
- 以后每次请求，客户端都携带认证的token
- 服务端对token进行解密，判断是否有效。


token的安全性

token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。

采用何种方式加密才是安全可靠的呢？

我们将采用JWT + RSA非对称加密


- 授权流程：
  - 1、用户请求登录，携带用户名密码到授权中心
  - 2、授权中心携带用户名密码，到用户中心查询用户
  - 3、查询如果正确，生成JWT凭证
  - 4、返回JWT给用户
- 鉴权流程：
  - 1、用户请求某微服务功能，携带JWT
  - 2、微服务将jwt交给授权中心校验
  - 3、授权中心返回校验结果到微服务
  - 4、微服务判断校验结果，成功或失败
  - 5、失败则直接返回401
  - 6、成功则处理业务并返回

  因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。

  可以发现，用户访问我们的网站，一次授权后，以后访问微服务都需要鉴权，那么每次鉴权都需要访问授权中心，一个用户请求，被分解为2次请求才能完成，效率比较低。

  能不能直接在微服务的完成鉴权，不去找授权中心呢？

  如果这样，就可以减少一次网络请求，效率提高了一倍。但是，微服务并没有鉴定JWT的能力，因为鉴定需要通过密钥来完成。我们不能把密钥交给其它微服务，存在安全风险。

  怎么办？

  这就要用到RSA非对称加密技术了。

有了非对称加密，我们就可以改变签名和验签的方式了：

- 生成RSA密钥对，私钥存放在授权中心，公钥下发给微服务
- 在授权中心利用私钥对JWT签名
- 在微服务利用公钥验证签名有效性

因为非对称加密的特性，不用担心公钥泄漏问题，因为公钥是无法伪造签名的，但要确保私钥的安全和隐秘。


用户只需要与微服务交互，不用访问授权中心，效率大大提高！

因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具，放到ly-common中。

在ly-common中引入实体类: playload  UserInfo
             引入工具类 JwtUtils :对Token进行加密解密
                       RsaUtils : 对Token文件进行存储提取

引入依赖:

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-api</artifactId>
                <version>0.10.5</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-impl</artifactId>
                <version>0.10.5</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-jackson</artifactId>
                <version>0.10.5</version>
                <scope>runtime</scope>
            </dependency>

载荷对象：

JWT中，会保存载荷数据，我们计划存储3部分：

- id：jwt的id
- 用户信息：用户数据，不确定，可以是任意类型
- 过期时间：Date

为了方便后期获取，我们定义一个类来封装： playload


@Data
public class Payload<T> {
    private String id;
    private T info;
    private Date expiration;
}



用户信息

这里我们假设用户信息包含3部分：

- id：用户id
- username：用户名
- role：角色（权限中会使用）

载荷:UserInfo


@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserInfo {  
private Long id;  
private String username;      
private String role;
}

然后在test包下写测试类试一试生成公钥和密钥

授权中心:

授权中心的主要职责：

- 用户登录鉴权：
  - 接收用户的登录请求，
  - 通过用户中心的接口校验用户名密码
  - 使用私钥生成JWT并返回
- 用户登录状态校验
  - 判断用户是否登录，其实就是token的校验
- 用户退出
  - 用户选择退出登录后，要让token失效
- 用户登录状态刷新
  - 用户登录一段时间后，JWT可能过期，需要刷新有效期

 新建一个auth模块
 导入相关依赖
 创建启动类
 配置yml

然后在在api-gateway中添加路由规则
zuul:
  prefix: /api
  routes:
    auth-service: /auth/**

登录功能

    接下来，我们需要在ly-auth编写一个接口，对外提供登录授权服务。

    登录授权流程我们上面已经分析过，基本流程如下：：

    - 1、用户请求登录，携带用户名密码到授权中心
    - 2、授权中心携带用户名密码，到用户中心查询用户
    - 3、查询如果正确，生成JWT凭证，查询错误则返回400,
    - 4、返回JWT给用户


上面的步骤有几个步骤需要我们去解决：

- 校验用户名密码必须到用户中心去做，因此用户中心必须对外提供的接口，根据用户名和密码查询用户。
- 生成JWT的过程需要私钥，验证签名需要公钥，因此需要在授权中心启动时加载公钥和私钥
- 返回JWT给用户，需要在以后的请求中携带jwt，那么客户端该把这个JWT保存在哪里呢？

3.2.1.读取公钥和私钥

1）编写配置

我们需要在授权中心完成授权，肯定要用到公钥、私钥、还有JWT工具，必须知道公钥、私钥文件的位置，另外生成token的有效期等信息，这些可以配置到application.yml中：

ly:
  jwt:
    pubKeyPath: D:/heima/rsa/id_rsa.pub # 公钥地址
    priKeyPath: D:/heima/rsa/id_rsa # 私钥地址

属性读取

然后编写属性类，加载这些数据：
JwtProperties

为了让属性类生效，在启动类上添加注解，启用这个属性：


思考一下：这个属性类只帮我们读取了公钥和私钥的地址，那么每次使用公钥我们都需要从硬盘读取，效率是不是太低了，能不能在这个类中，直接读取公钥和私钥，保存起来，供以后使用呢？

那么问题来了，加载公钥和私钥的代码应该写在哪里呢？构造函数可以吗？

显然不行，因为构造函数执行时，Spring还没有完成属性注入，此时pubKeyPath和priKeyPath都没有值，我们必须在Spring完成属性初始化后再加载密钥。


Bean的生命周期:
Spring Bean在Spring Bean Factory Container中完成其整个生命周期：以下是完成其生命周期所需的各种内容：

1. Spring容器从XML文件或@Configuration中bean的定义中实例化bean。
2. Spring依据配置中指定的属性，为bean填充所有属性。
3. 如果bean实现BeanNameAware接口，spring调用setBeanName()方法，并传递bean的id。
4. 如果bean实现BeanFactoryAware接口，spring将调用setBeanFactory()方法，并把自己作为参数。
5. 如果bean实现ApplicationContextAware接口，spring将调用setApplicationContext()方法，并把ApplicationContext实例作为参数。
6. 如果存在与bean关联的任何BeanPreProcessors（前置处理器），则调用preProcessBeforeInitialization()方法。比如Autowired等依赖注入功能是在此时完成。
7. 如果Bean实现了InitializingBean接口，则调用bean的afterPropertiesSet()方法。
8. 如果为bean指定了init-method，那么将调用bean的init方法。
9. 最后，如果存在与bean关联的任何BeanPostProcessors，则将调用postProcessAfterInitialization（）方法。


我们加载公钥、私钥可以再7或8的两个位置来完成。比如我们在7的位置，需要两步：

- 实现InitializingBean接口
- 实现afterPropertiesSet方法，并在方法内加载密钥


查询用户接口

用户中心必须对外提供查询接口，方便ly-auth做用户名密码校验。

首先在ly-user-interface定义接口：

引入Feign依赖

声明接口：

接下来:
我们把jwt返回到客户端，客户端保存到哪里呢？

目前有两种解决方案：

- 方案一：存入web存储如：LocalStorage或SessionStorage中
  - 优点：
    - 不用担心cookie禁用问题
    - 不会随着浏览器自动发送，可以减少不必要的请求头大小
  - 缺点：
    - 不会随着浏览器自动发送，需要前端额外代码，携带jwt
    - 会遭到XSS（跨站脚本）攻击
- 方案二：存入cookie
  - 优点：
    - 会随着浏览器自动发送，客户端不用任何额外代码
    - 使用httponly，避免XSS攻击风险
  - 缺点：
    - 会随着浏览器自动发送，某些时候有些多余
    - 可能遭到CSRF（跨站资源访问）攻击

这里我们采用哪一种呢？

我们采用cookie方案，cookie方案的两个缺陷我们也可以解决：

- 问题1：会随着浏览器自动发送，某些时候有些多余
  - 解决：后端服务与其它服务资源（如静态资源）采用不同域名，浏览器的同源策略会限制cookie
- 问题2：可能遭到CSRF（跨站资源访问）攻击
  - 解决：避免get请求操作服务器资源，遵循Rest风格，必要时在token中存入随机码

我们在ly-common中编写的CookieUtils可以帮我们快捷实现cookie的读写问题：

接下来我们就在ly-auth编写授权接口，接收用户名和密码，校验成功后，写入cookie中。

AuthController

- 请求方式：post
- 请求路径：/login
- 请求参数：username和password
- 返回结果：无，直接写入cookie



ervice的基本流程：

- 查询用户
- 生成token
- 写入cookie

这里还有几个属性要配置，包括：

- token有效期
- cookie名称
- cookie的domain属性，决定cookie在哪些域名下生效

这三个属性我们也配置到配置文件，不过我们做下特殊标记，这些虽然与JWT有关，但却是用户登录相关属性，因此这样来配置：


ly:
  jwt:
    pubKeyPath: D:/heima/rsa/id_rsa.pub # D:/heima/rsa/id_rsa.pub # 公钥地址
    priKeyPath: D:/heima/rsa/id_rsa # D:/heima/rsa/id_rsa # 私钥地址
    user:
      expire: 30 # 过期时间,单位分钟
      cookieName: LY_TOKEN # cookie名称
      cookieDomain: leyou.com # cookie的域
      cookieMaxAge: 1800 #cookie过期时间


      注意：cookie的domain决定了cookie作用的域名，写成"leyou.com"可以让leyou.com下的所有二级域名共享cookie

      然后在JwtProperties中添加属性：


AuthService

解决cookie写入问题：
在页面输入登录信息，然后点击登录：发送请求发现:
Zuul内部有默认的过滤器，会对请求和响应头信息进行重组，过滤掉敏感的头信息：


有两种覆盖方式：

全局设置：

- zuul.sensitive-headers=

会作用于所有路径。

指定路由设置：

- zuul.routes.<routeName>.sensitive-headers=
- zuul.routes.<routeName>.custom-sensitive-headers=true

此处我们采用全局配置：

首页判断登录状态

虽然cookie已经成功写入，但是我们首页的顶部，登录状态依然没能判断出用户信息：


传统登录校验的步骤：

- 1）用户请求到达服务端，会自动携带cookie
- 2）cookie中包含sessionId，tomcat根据sessionId获取session
- 3）从session中读取用户信息，判断是否存在
- 4）存在，证明已经登录；不存在，证明登录超时或未登录

我们现在使用的是无状态登录，不存在session，而是把用户身份写入了token，是否需要发请求到服务端进行校验呢？

肯定需要的，因为token需要通过公钥解析才知道是否有效。

分析一下步骤：

- 1）页面向后台发起请求，携带cookie
- 2）后台获取cookie中的LY_TOKEN
- 3）校验token是否有效
  - 无效：登录失效
  - 有效：解析出里面的用户信息，返回到页面

接下来，我们就分步实现上述功能。


.校验用户登录状态

我们在ly-auth中定义用户的校验接口，通过cookie获取token，然后校验通过返回用户信息。

- 请求方式：GET
- 请求路径：/verify
- 请求参数：无，不过我们需要从cookie中获取token信息
- 返回结果：UserInfo，校验成功返回用户信息；校验失败，则返回401



刷新token

JWT内部设置了token的有效期，默认是30分钟，30分钟后用户的登录信息就无效了，用户需要重新登录，用户体验不好，怎么解决呢？

JWT的缺点就凸显出来了：

- JWT是生成后无法更改，因此我们无法修改token中的有效期，也就是无法续签。

怎么办？

3种解决方案：

- 方案1：每次用户访问网站，都重新生成token。操作简单粗暴，但是token写入频率过高，效率实在不好。
- 方案2：登录时，除了生成jwt，还另外生成一个刷新token，每当token过期，如果用户持有刷新token，则为其重新生成一个token。这种方式比较麻烦，而且会增加header大小。
- 方案3：cookie即将到期时，重新生成一个token。比如token有效期为30分钟，当用户请求我们时，我们可以判断如果用户的token有效期还剩下15分钟，那么就重新生成token，可以看做上面两种的折中方案。

我们采用方案3，在验证登录的逻辑中，加入一段时间判断逻辑，如果距离有效期不足15分钟，则生成一个新token：


.注销登录

首页左上角，登录后除了显示用户名，还有一个注销登录按钮：



点击这个按钮，该如何实现退出登录呢？

3.6.1.思路分析

回想下以前怎么实现的：

- 用户点击退出，发起请求到服务端
- 服务端删除用户session即可

我们现在登录是无状态的，也就没有session，那该怎么办呢？

有同学会想，太简单了，直接删除cookie就可以了。

别忘了，我们设置了httponly，JS无法操作cookie。因此，删除cookie也必须发起请求到服务端，由服务端来删除cookie。



那么，是不是删除了cookie，用户就完成了退出登录呢？

设想一下，删除了cookie，只是让用户在当前浏览器上的token删除了，但是这个token依然是有效的！这就是JWT的另外一个缺点了，无法控制TOKEN让其失效。如果用户提前备份了token，那么重新填写到cookie后，登录状态依然有效。

所以，我们不仅仅要让浏览器端清除cookie，而且要让这个cookie中的token失效！

3.6.2.失效token黑名单

怎样才能实现这样的效果呢？

大家肯定能想到很多办法，但是无论哪种思路，都绕不可一点：JWT的无法修改特性。因此我们不能修改token来标记token无效，而是在服务端记录token状态，于是就违背了无状态性的特性。

如果要记录每一个token状态，会造成极大的服务端压力，我提供一种思路，可以在轻量级数据量下，解决这个问题：

- 用户进行注销类型操作时（比如退出、修改密码），校验token有效性，并解析token信息
- 把token的id存入redis，并设置有效期为token的剩余有效期
- 校验用户登录状态的接口，除了要正常逻辑外，还必须判断token的id是否存在于redis
- 如果存在，则证明token无效；如果不存在，则证明有效

等于是在Redis中记录失效token的黑名单，黑名单的时间不用太长，最长也就是token的有效期：30分钟，因此服务端数据存储压力会减少。



3.6.3.代码实现

步骤梳理：

- 前端页面发起请求到服务端
- 服务端校验token是否有效，并解析token
- 将token的id存入redis，并设置有效期为token的剩余有效期
- 设置cookie有效期为0，即可删除cookie

这里要用到Redis，所以先在ly-auth引入Redis依赖和配置：

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

在application.yml中编写配置：

    spring:
      redis:
        host: 192.168.206.66





1）发起请求

点击页面，发现请求已经发出：



2）业务接口

controller分析：

- 请求方式：POST
- 请求路径：/logout
- 请求参数：无，但要cookie中的token，因此需要request和response
- 返回值：无，但要删除cookie


.修改登录校验逻辑

登录校验不仅仅要看JWT是否有效，还要检查redis中是否已经存在

1，首先，即使前端做了数据校验，后端也需要校验，避免有专业人事绕开前端直接访问后端


权限控制的基本流程是这样：

- 1）获取用户的登录凭证jwt
- 2）解析jwt，获取用户身份
  - 如果解析失败，证明没有登录，返回401
  - 如果解析成功，继续向下
- 3）根据身份，查询用户权限信息
- 4）获取当前请求资源（微服务接口路径）
- 5）判断是否有访问资源的权限

一般权限信息会存储到数据库，会对应角色表和权限表：

- 角色：就是身份，例如普通用户，金钻用户，黑钻用户，商品管理员
- 权限：就是可访问的访问资源，如果是URL级别的权限控制，包含请求方式、请求路径、等信息

一个角色一般会有多个权限，一个权限也可以属于多个用户，属于多对多关系。根据角色可以查询到对应的所有权限，再根据权限判断是否可以访问当前资源即可。


加载公钥

权限控制的第一部分，就是获取cookie，并解析jwt，那么肯定需要公钥。我们在ly-api-gateway中配置公钥信息，并在服务启动时加载。



编写过滤器逻辑

有了公钥，就可以编写权限控制逻辑了，权限验证通过，放行到微服务；不通过，则拦截并返回401给用户。因此拦截的逻辑需要在请求被路由之前执行，你能想到用什么实现吗？

没错，就是ZuulFilter。

ZuulFilter是Zuul的过滤器，其中pre类型的过滤器会在路由之前执行，刚好符合我们的需求。接下来，我们自定义pre类型的过滤器，并在过滤器中完成权限校验逻辑。


要注意，并不是所有的路径我们都需要拦截，例如：

- 登录校验接口：/auth/login
- 注册接口：/user/register
  数据校验接口：/user/check/
- 发送验证码接口：/user/code
- 搜索接口：/search/**

另外，跟后台管理相关的接口，因为我们没有做登录和权限，因此暂时都放行，但是生产环境中要做登录校验：

- 后台商品服务：/item/**

所以，我们需要在拦截时，配置一个白名单，如果在名单内，则不进行拦截。

ly:
  filter:
    allowPaths:
      - /api/auth/login
      - /api/search
      - /api/user/register
      - /api/user/check
      - /api/user/code
      - /api/item


然后配置属性类，

FilterProperties

JwtProperties  

然后写过滤器
UserTokenFilter

思考:

如果你的微服务地址不小心暴露了呢？

    一旦微服务地址暴露，用户就可以绕过网关，直接请求微服务，那么我们之前做的一切权限控制就白费了!

    因此，我们的每个微服务都需要对调用者的身份进行认证，如果不是有效的身份，则应该阻止访问。


    思路分析

    合法的调用者身份，其实就是其它微服务，还有网关。我们首先需要把这些合法的调用者身份存入数据库，并给每一个调用者都设置密钥。接下来的步骤就简单了：

    - 当访问某个微服务时，需要携带自己的身份信息，比如token
    - 被调用者验证身份信息身份合法
    - 如果验证通过则放行，允许访问

    因此，我们必须在一个微服务来管理调用者身份、权限、当然还包括用户的权限，角色等，并对外提供验证调用者身份、查询调用者权限的接口，我们可以在ly-auth中完成这些业务。


令牌认证

如果我们将第一次验证后的身份信息生成一个令牌（token），以后每次请求携带这个token，只要验证token有效，就无需每次调用授权中心验证身份了！

服务调用方需要向授权中心申请令牌，而后每次请求微服务都携带这个令牌即可，而令牌的生成我们依然使用JWT规范来实现。


整个过程是不是跟用户登录也请求服务有点像啊？

没错，其实服务授权，就是把微服务也当做用户来看待。区别在于服务授权无需注册，而是有管理人员提前录入服务及服务的权限信息。


不过这里依然有问题需要思考：

- 请求令牌的动作什么时候做？
- 令牌过期以后如何生成新令牌？

2.1.3.版本3-令牌自动刷新

- 问题1：请求令牌的动作什么时候做？
  - 我们肯定不希望频繁去申请令牌，所以应该在项目启动的时候，携带身份信息，去授权中心申请令牌，然后保存起来。
  - 这个可以通过自定义配置类，在配置类中完成令牌的申请和保存，而配置类会在项目启动时加载
- 问题2：令牌过期以后如何生成新令牌？
  - 虽然我们不希望频繁去申请令牌，但是出于安全考虑，令牌最好有一定的过期时间，然后定期更新。
  - 既然是定期更新，当然是定时任务来完成了

如图：


.查询服务权限信息

有了上面的数据库表，就具备了服务信息和权限信息。接下来就需要有验证服务id和secret、查询服务权限的功能：

- 验证服务id和secret，本质就是根据id查询和密码验证，通用mapper即可实现。
- 查询服务权限：即根据application的id查询出可以访问的target的id。
  - 要通过tb_application_privilege表来实现，没有通用mapper可以使用，

以上业务都在ly-auth服务中实现。



2.3.1.实体类

在ly-auth中创建于数据库对应的持久对象：
ApplicationInfo

要使用数据库相关业务，必须引入通用mapper等依赖：

然后在application.yml配置文件中添加与数据库相关配置：

然后在启动类上引入mapper扫描包，并且要去除忽略DataSource：

编写mapper继承通用mapper

有了服务信息，接下来就需要在授权中心ly-auth编写服务验证并签发JWT的接口了。
基本思路如下：

- 接收请求方的id和secret
- 验证id和secret
- 生成JWT
  - 准备载荷数据，包含两部分信息：
    - 请求方的身份
    - 请求方可以访问的服务id列表
  - 签发JWT

因此，这里我们需要一个新的载荷对象：AppInfo


.controller：

请求相关信息：

- 请求方式：Get
- 请求路径：/authorization
- 请求参数：id和secret
- 返回结果：JWT，包含载荷数据就是AppInfo


这里token并没有写入cookie，而是作为返回值。

2.4.2.配置token有效期

生成token的过程中，需要设置有效时间，因此我们写入到配置文件，这个配置与用户登录的User无关，我们写到另一个配置中：

app:
      expire: 1500 #过期时间25小时
      id: 10
      secret: auth-service
      headerName: heima88

然后在JwtProperties中读取：

PasswordEncoder

数据库中的secret也是加密存储的，因此需要通过之前学习过的PasswordEncoder来加密和验证。

在yaml文件中引入密码相关配置：

    ly:
      encoder:
        crypt:
          secret: ${random.uuid}
          strength: 10

编写配置类，配置PasswordEncoder：

在AuthService中，添加新的方法：


.微服务获取JWT

凡是需要调用其它微服务的服务，都需要申请JWT，否则请求将来会被拦截。包括下列服务：

- ly-gateway：网关的路由功能，要求它会调用所有其它微服务
- ly-auth：授权中心要调用ly-user，查询用户或微服务信息
- ly-search：搜索服务要调用商品微服务
- ly-page：搜索服务要调用商品微服务

上述这些微服务可以分成两类来处理：

- ly-auth：ly-auth本身就是JWT的签发者，比较特殊，因此其JWT可以自己生成，无需找别人获取。
- 其它微服务：其它微服务获取JWT都需要找ly-auth来实现

因此下面我们以ly-gateway和ly-auth为例来讲解如何在项目启动时加载JWT。



2.5.1.ly-gateway获取token

2.5.1.1.配置id和secret

申请token，必须携带服务id和服务密钥信息，这两部分我们设置到配置文件中：


Feign客户端

接下来，定义一个Feign的客户端，用来调用授权中心的授权认证接口：

先在ly-gateway引入Feign依赖：

请求头中携带token

2.6.1.思路分析

有了token后的下一步，就是在每次请求时都携带上token。这里有两个问题需要思考：

- 要在请求中携带token，放到请求中的哪里呢？
- 如何对服务间调用的请求拦截和修改呢？

问题1：请求中携带token，放到请求中的哪里呢？

请求中可以携带数据的地方有下面几种选择：

- 请求参数
- 请求头

我们不能把token放到请求参数中，因为请求调用的接口，其参数都是固定的，我们不能随意修改。



综上所述，我们使用请求头来携带token。

问题2：如何对服务间调用的请求拦截和修改呢？

对于不同微服务有两种的不同的实现方式：

- 网关ly-gateway：
  - 网关是反向代理，把请求转发给微服务，不需要经过feign，因此要在转发前修改请求头
- 其它通过Feign调用的微服务：
  - 微服务之间调用时通过Feign，我们需要在Feign发起请求前修改请求头

这里微服务之间调用我们依然是ly-auth为例来演示。



2.6.2.网关请求头处理

配置请求头

首先配置token在请求头中的名称，修改ly-gateway的application.yml：


uul过滤器处理请求头

要在转发前修改请求头，肯定是通过网关的拦截器来做：


Feign的拦截器处理请求头

微服务间调用是通过Feign来实现的，而Feign是声明式调用，看不到请求的过程。

因此要想对请求修改，必须通过Feign的拦截器来实现。

Feign中有一个拦截器接口：


可以看到接口中有一个抽象方法：apply(RequestTemplate template)，在请求发出之前会调用拦截器的apply方法。其参数：template可以对请求进行任意个性化修改。


因此我们需要实现这样一个接口，并且在其中添加请求头，而要让这个接口生效，还需要把这个拦截器注册到Spring容器中。
FeignTokenInterceptor

在leyou -user模块里面

添加JwtProperties
    MvcConfig

    PrivilegeTokenInterceptor


定义拦截器：

 需要定义的包括一个用来拦截请求的拦截器，以及注册拦截器的SpringMVC的配置：

配置MvcConfig，让拦截器生效：


面试常见问题

- 你们使用JWT做登录凭证，如何解决token注销问题
  答：jwt的缺陷是token生成后无法修改，因此无法让token失效。只能采用其它方案来弥补，基本思路如下：
  	1）适当减短token有效期，让token尽快失效
  	2）删除客户端cookie
  	3）服务端对失效token进行标记，形成黑名单，虽然有违无状态特性，但是因为token有效期短，因此标记 	时间也比较短。服务器压力会比较小
- 既然token有效期短，怎么解决token失效后的续签问题？
  答：在验证用户登录状态的代码中，添加一段逻辑：判断cookie即将到期时，重新生成一个token。比如token有效期为30分钟，当用户请求我们时，我们可以判断如果用户的token有效期还剩下10分钟，那么就重新生成token。因此用户只要在操作我们的网站，就会续签token
- 如何解决异地登录问题？
  答：在我们的应用中是允许用户异地登录的。如果要禁止用户异地登录，只能采用有状态方式，在服务端记录登录用户的信息，并且判断用户已经登录，并且在其它设备再次登录时，禁止登录请求，并要求发送短信验证。
- 如何解决cookie被盗用问题？
  答：cookie被盗用的可能性主要包括下面几种：
  - XSS攻击：这个可以在前端页面渲染时对 数据做安全处理即可，而且我们的cookie使用了Httponly为true，可以防止JS脚本的攻击。
  - CSRF攻击：
    - 我们严格遵循了Rest风格，CSRF只能发起Get请求，不会对服务端造成损失，可以有效防止CSRF攻击
    - 利用Referer头，防盗链
  - 抓包，获取用户cookie：我们采用了HTTPS协议通信，无法获取请求的任何数据
  - 请求重放攻击：对于普通用户的请求没有对请求重放做防御，而是对部分业务做好了幂等处理。运行管理系统中会对token添加随机码，认证token一次有效，来预防请求重放攻击。
  - 用户电脑中毒：这个无法防范。
- 如何解决cookie被篡改问题？
  - 答：cookie可以篡改，但是签名无法篡改，否则服务端认证根本不会通过
- 如何完成权限校验的？
  - 首先我们有权限管理的服务，管理用户的各种权限，及可访问路径等
  - 在网关zuul中利用Pre过滤器，拦截一切请求，在过滤器中，解析jwt，获取用户身份，查询用户权限，判断用户身份可以访问当前路径
- 服务端微服务地址不小心暴露了，用户就可以绕过网关，直接访问微服务，怎么办？
  - 答：我们的微服务都做了严格的服务间鉴权处理，任何对微服务的访问都会被验证是否有授权，如果没有则会被拦截。具体实现：此处省略500字，见本节课内容












